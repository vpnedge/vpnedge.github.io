<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://vpnedge.github.io/news/article-111219.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashnode2025/favicon.ico" type="image/x-icon"/>
    <title>前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)</title>
        <meta name="description" content="文章目录    一、state   1.1 state使用 1.2 mapState 辅助函数   二、getters   2.1 getters的使用   三、Mutation   3.1 muta" />
    
    <meta name="author" content="VPN Edge 机场订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnedge.github.io/news/article-111219.htm" />
    <meta property="og:site_name" content="VPN Edge 机场订阅官网" />
    <meta property="og:title" content="前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)" />
    <meta property="og:image" content="https://vpnedge.github.io/uploads/20240303/0001d18562c9eb89a3592b526b680d10.webp" />
        <meta property="og:release_date" content="2025-05-04T09:27:32" />
    <meta property="og:updated_time" content="2025-05-04T09:27:32" />
        <meta property="og:description" content="文章目录    一、state   1.1 state使用 1.2 mapState 辅助函数   二、getters   2.1 getters的使用   三、Mutation   3.1 muta" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/style.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-10VQ6CQBLF"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-10VQ6CQBLF');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">VPN Edge</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                    </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">新闻资讯</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/clashnode2025/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)</h1>
                    </div>

                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-dracula"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li>一、state</li> <li> <ul> <li>1.1 state使用</li> <li>1.2 mapState 辅助函数</li> </ul> </li> <li>二、getters</li> <li> <ul> <li>2.1 getters的使用</li> </ul> </li> <li>三、Mutation</li> <li> <ul> <li>3.1 mutations的使用</li> <li>3.2 mapMutations</li> <li>3.3 使用常量替代Mutation事件类型</li> </ul> </li> <li>四、actions</li> <li> <ul> <li>4.1 action类似于mutation</li> </ul> </li> </ul> </li> </ul> </div> <h2>一、state</h2> <h3>1.1 state使用</h3> <p>引入vuex 以后，我们需要在state中定义变量，类似于vue中的data，通过state来存放状态</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>注册两个组件分别引入到app.vue中</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>vabout<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>vabout<span class="token operator">&gt;</span><span class="token operator">&lt;</span>vhome<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>vhome<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></code></pre> <p>vhome组件内容</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></code></pre> <p>vabout组件内容</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220605/bb3a25d7380b9ec4c76a0b25df3c4f72.jpg" alt="前端:一篇彻底搞懂vuex (mapState、mapGetters、mapMutations、mapActions)"><br /> 如图，显示出显示出相应的内容，有了vuex，我们不必在考虑组件之间的传值，直接就可以通过$store来获取不同的数据，但是如果需要vuex中的多个数据的这时候，这样写就太啰嗦了，我们可以将它定义在computed中。</p> <p>Props，methods,data和computed的初始化都是在beforeCreated和created之间完成的。<br /> 例：</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">nickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>这样引入就方便了很多。</p> <h3>1.2 mapState 辅助函数</h3> <p>1.1中的方法虽然引入的时候方便了，但是computed中定义的代码还是很多，而这时候vuex又给我们提供了更简便的方法mapState方法</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span>mapState<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">,</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>其中</p> <pre><code class="prism language-javascript"><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//映射哪些字段就填入哪些字段</span></code></pre> <p>这一句代码就相当于下面这些</p> <pre><code class="prism language-javascript"><span class="token function">nickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>nickname<span class="token punctuation">}</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token function">gender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>gender<span class="token punctuation">}</span></code></pre> <p><strong>记住：用mapState等这种辅助函数的时候，前面的方法名和获取的属性名是一致的。</strong></p> <p>如果我们需要自定义一个计算属性怎么办呢？怎么添加呢？<br /> 毕竟现在已经成这样了 computed: mapState([‘nickname’,‘age’,‘gender’])<br /> 这时候我们就需要es6中的展开运算符：…</p> <pre><code class="prism language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//computed是不能传参数的</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <h2>二、getters</h2> <h3>2.1 getters的使用</h3> <p>getters相当于vue中的计算属性，通过getters进一步处理，得到我们想要的值，而且允许传参，第一个参数就是state</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span> Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">firstname</span><span class="token operator">:</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token literal-property property">lastname</span><span class="token operator">:</span><span class="token string">'三丰'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">realname</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> state<span class="token punctuation">.</span>firstname<span class="token operator">+</span>state<span class="token punctuation">.</span>lastname<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">money_us</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>money<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//computed是不能传参数的</span><span class="token function">valued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'realname'</span><span class="token punctuation">,</span><span class="token string">'money_us'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <h2>三、Mutation</h2> <h3>3.1 mutations的使用</h3> <p>我们代码中定义的时候需要些mutations，它类似于vue中的methods，</p> <p>mutations需要通过commit来调用其里面的方法，它也可以传入参数，第一个参数是state，第二个参数是载荷（payLoad），也就是额外的参数</p> <p>代码如下</p> <pre><code class="prism language-javacript">mutations: { //类似于methods   addAge(state,payLoad){      state.age+=payLoad.number   } }</code></pre> <p>template部分</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>div<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></code></pre> <p>js部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addAge'</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">number</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>调用的时候第二个参数最好写成对象形式，这样我们就可以传递更多信息。</p> <p>但是，这样写还是会遇到同样的问题，就是如果需要操作多个数据，就会变的麻烦，这时候我们就需要mapMutations，通过它将方法映射过来</p> <h3>3.2 mapMutations</h3> <p>跟mapState、mapGetters一样</p> <pre><code class="prism language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'addAge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>mapMutations([‘addAge’])这一句就相当于下面的代码</p> <pre><code class="prism language-javascript"><span class="token function">addAge</span><span class="token punctuation">(</span><span class="token parameter">payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'addAge'</span><span class="token punctuation">,</span>payLoad<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>参数我们可以在调用这个方法的时候写入</p> <pre><code class="prism language-javascript"><span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"addAge({number:5})"</span><span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></code></pre> <p>这时候一些杠精就要说了，我为什么要绕一圈，从mutations里面去改state呢？我能不能直接改state呢？</p> <p>比如这样：</p> <pre><code class="prism language-javascript"><span class="token function">addAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>age<span class="token operator">+=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>实际看结果也可以，那我为什么从mutations里面中转一下呢？</p> <p>原因如下：<br /> ① 在mutations中不仅仅能做赋值操作<br /> ② 作者在mutations中做了类似埋点操作，如果从mutations中操作的话， 能被检测到，可以更方便用调试工具调试，调试工具可以检测到实时变化，而直接改变state中的属性，则无法实时监测</p> <p>注意：mutations只能写同步方法，不能写异步，比如axios、setTimeout等，这些都不能写，mutations的主要作用就是为了修改state的。</p> <p>原因类似：如果在mutations中写异步，也能够调成功，但是由于是异步的，不能被调试工具追踪到，所有不推荐这样写，不利于调试,这是官方的约定。</p> <h3>3.3 使用常量替代Mutation事件类型</h3> <p>把原本的方法名称由字符串转变成常量</p> <p>代码如下：</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">'vue'</span><span class="token keyword">import</span> Vuex<span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">const</span><span class="token constant">ADD_AGE</span><span class="token operator">=</span><span class="token string">'addAge'</span>  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//存放状态</span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">firstname</span><span class="token operator">:</span><span class="token string">'张'</span><span class="token punctuation">,</span><span class="token literal-property property">lastname</span><span class="token operator">:</span><span class="token string">'三丰'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">getters</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//类似于 computed</span><span class="token function-variable function">realname</span><span class="token operator">:</span><span class="token parameter">state</span><span class="token operator">=&gt;</span>state<span class="token punctuation">.</span>firstname<span class="token operator">+</span>state<span class="token punctuation">.</span>lastname<span class="token punctuation">,</span><span class="token function">money_us</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>money<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//类似于methods</span><span class="token punctuation">[</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          state<span class="token punctuation">.</span>age<span class="token operator">+=</span>payLoad<span class="token punctuation">.</span>number<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">modules</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>将addAge方法名字定义为一个常量，当调用的时候直接引入</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span><span class="token constant">ADD_AGE</span><span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'../store'</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span>mapMutations<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vuex'</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>这样写的好处：</p> <p>① 不容易写错，字符串容易写错，而且字符串写错以后不会报错位置，而用常量替代，如果写错，eslint可以提示错误位置</p> <p>用常量替代mutations的时候我我们可以新建一个文件（mutation_type.js）专门存储这些常量</p> <p>mutation_type.js部分</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token keyword">default</span><span class="token punctuation">{<!-- --></span><span class="token constant">ADD_AGE</span><span class="token operator">:</span> ‘addAge’<span class="token punctuation">}</span></code></pre> <p>然后再store/index.js中引入</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token constant">MUTATION_TYPES</span> from ‘<span class="token punctuation">.</span><span class="token operator">/</span>mutation_type’（先引入）<span class="token keyword">export</span><span class="token keyword">let</span><span class="token constant">MUTATION_TYPE</span><span class="token operator">=</span><span class="token constant">MUTATION_TYPES</span> （再导出）</code></pre> <p>这个地方有一个坑，不要将引入和导出合并成一行代码：比如这样</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token comment">// 可以简单理解为</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token keyword">export</span><span class="token punctuation">{<!-- --></span> foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>需要注意的是，两者并不一样，写成一行以后，foo和bar实际上并没有被导入当前模块，只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span><span class="token constant">MUTATION_TYPE</span><span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'../store'</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">MUTATION_TYPE</span><span class="token punctuation">.</span><span class="token constant">ADD_AGE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>总结一下：<br /> ① 依赖state得到新的数据，用getters（跟computed一样，只读）<br /> ② 修改state的属性值，就用mutations（同步操作）</p> <h2>四、actions</h2> <h3>4.1 action类似于mutation</h3> <p>区别：action可以提交mutation<br /> action也不要直接去操作state，而是去操作mutation</p> <p>action包含异步操作，类似于axios请求，可以都放在action中写</p> <p>action中的方法默认的就是异步，并且返回promise</p> <p>代码如下</p> <p>store部分</p> <pre><code class="prism language-javascript"><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">nickname</span><span class="token operator">:</span><span class="token string">'Simba'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在actions中定义一个方法：getUserInfo，并且返回一个对象</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'getUserInfo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在created中调用此方法，并将结果赋值给res，打印res，结果打印出Promise</p> <p>这表明，在actions中的方法，默认就是异步的，通过then获取数据</p> <p>mapActions([‘getUserInfo’]) 相当于以下代码</p> <pre><code class="prism language-javascript"><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>‘getUserInfo’<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在实际开发当中，state里面的属性值是空的，当登录以后，再进行获取对应的信息。</p> <p>登录以后，需要得到用户信息，那如何得到呢？</p> <p>首先进入页面的时候调用actions中的getUserInfo方法</p> <p>代码如下</p> <p>vue部分</p> <pre><code class="prism language-javascript"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>‘getUserInfo’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>store部分</p> <p>首先要想得到数据，那就相当于给state赋值，那首先想到的就是mutations来操作state，但是请求的接口都是axios异步，所以就不能用mutations而是用actions，通过actions来操作mutations从而操作state</p> <pre><code class="prism language-javascript"><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">new</span><span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">nickname</span><span class="token operator">:</span>‘’<span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token literal-property property">money</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">mutations</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token function">setUerInfo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>payLoad</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>    state<span class="token punctuation">.</span>nickname<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>nickname    state<span class="token punctuation">.</span>age<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>age    state<span class="token punctuation">.</span>gender<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>gender    state<span class="token punctuation">.</span>money<span class="token operator">=</span> payLoad<span class="token punctuation">.</span>money<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">actions</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">//actions没有提供state当参数</span><span class="token keyword">async</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{<!-- --></span>commit<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">var</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/token接口'</span><span class="token punctuation">)</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setToken'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">async</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//context可以理解为它是整个Store的对象.类似于this.$store，他里面包含了state，getter，mutations，actions</span><span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/接口url'</span><span class="token punctuation">)</span>   context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setUerInfo'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token comment">//相当于 this.$store.commit,第一个参数是方法名，第二个参数是要传入的数据</span>   context<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getToken'</span><span class="token punctuation">)</span><span class="token comment">//actions也可以调用自己的其他方法</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <p>运行过程，调用getUserInfo方法以后，进入actions，然后通过commit调用setUserInfo，将res（用户信息）作为参数传入传入进去，并将相对应的属性值赋值给state，完成这一过程的操作。</p> <p>getUserInfo的参数也可以用解构，这样更方便</p> <pre><code class="prism language-javascript"><span class="token keyword">async</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{<!-- --></span>commit<span class="token punctuation">,</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/接口url'</span><span class="token punctuation">)</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setUerInfo'</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'getToken'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-110396.htm">中国最好的珠宝品牌有哪些牌子(中国最好的珠宝品牌有哪些名字)</a></p>
                                        <p>下一个：<a href="/news/article-111220.htm">海拉鲁大陆地图解锁（海拉鲁大陆地图哪里找到）</a></p>
                                    </div>
                
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-99097.htm" title="动物疫苗的储存不合格区什么颜色的线（动物疫苗运输与储存规范）">动物疫苗的储存不合格区什么颜色的线（动物疫苗运输与储存规范）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-26-node-share-links.htm" title="VPN Edge | 4月26日21M/S|免费Shadowrocket/Clash/V2ray/SSR订阅机场">VPN Edge | 4月26日21M/S|免费Shadowrocket/Clash/V2ray/SSR订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-101244.htm" title="聊城卖宠物的地方在哪里（聊城哪里有卖宠物的）">聊城卖宠物的地方在哪里（聊城哪里有卖宠物的）</a></li>
                        <li class="py-2"><a href="/news/article-98377.htm" title="FreeRTOS实时操作系统的任务通知方法_操作系统">FreeRTOS实时操作系统的任务通知方法_操作系统</a></li>
                        <li class="py-2"><a href="/news/article-107089.htm" title="SpringMVC拦截器配置方式">SpringMVC拦截器配置方式</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-5-11-node-share-links.htm" title="VPN Edge | 5月11日22.4M/S|免费Clash/V2ray/SSR/Shadowrocket订阅机场">VPN Edge | 5月11日22.4M/S|免费Clash/V2ray/SSR/Shadowrocket订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-108698.htm" title="动物医院上班日志（动物医院上班日志范文）">动物医院上班日志（动物医院上班日志范文）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-5-10-free-high-speed-nodes.htm" title="VPN Edge | 5月10日22.9M/S|免费Clash/V2ray/SSR/Shadowrocket订阅机场">VPN Edge | 5月10日22.9M/S|免费Clash/V2ray/SSR/Shadowrocket订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-110396.htm" title="中国最好的珠宝品牌有哪些牌子(中国最好的珠宝品牌有哪些名字)">中国最好的珠宝品牌有哪些牌子(中国最好的珠宝品牌有哪些名字)</a></li>
                        <li class="py-2"><a href="/news/article-104544.htm" title="加盟饲料加工厂（加盟饲料加工厂赚钱吗）">加盟饲料加工厂（加盟饲料加工厂赚钱吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">39</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        VPN Edge 机场订阅官网 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashnode2025/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/navbar.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/counter.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>